from microbit import *
import math

def MeanStdDevAccel(numreadings, pausems, lsbvaluemg, verbose=True):
    samples = [0.0]*numreadings; mean = 0.0
    i = 0
    while (i < numreadings):
        accel3d = accelerometer.get_values()
        accelx = (1.01278*accel3d[0]*0.00980/lsbvaluemg) - 0.1576
        accely = (1.00555*accel3d[1]*0.00980/lsbvaluemg) + 0.0803609
        accelz = (0.998015*accel3d[2]*0.00980/lsbvaluemg) - 0.148194
        accelmodule = math.sqrt(accelx**2 + accely**2 + accelz**2)
        samples[i] = accelmodule
        mean += accelmodule
        sleep(pausems) # Pause in ms inside the loop
        i += 1 
    mean /= numreadings
    variance = 0.0
    for accelmodule in samples:
        variance += (accelmodule - mean)**2
    variance /= (numreadings - 1)
    stdev = math.sqrt(variance)
    if verbose:
        print("Mean of acceleration readings (m/s^2) = %15.13f" % mean)
        print("Standard deviation of acceleration readings ((m/s^2) = %15.13f" % stdev)
    return [mean, stdev]

i2c.write(0x1d, b'\x2a\x00')  # Disable to be able to configure
i2c.write(0x1d, b'\x0e\x00')  # 2g scale
i2c.write(0x1d, b'\x2b\x02')  # High-resolution
i2c.write(0x1d, b'\x2a\x29')  # Sample rate of 12.5Hz
print('2g, 12.5 Hz, high resolution, 125 readings :')

display.scroll('Gravity in m/s^2 ')

while True:
    t1 = running_time()
    [mean, stddev] = MeanStdDevAccel(125, 80, 1.024, verbose=True) # Pause 80 ms. 125 x 0.08s = 10.0s
    t2 = running_time()
    print(t2-t1)
    stddev += 0.5*0.00980  # Add 0.5 mg uncertainty of the 2g scale LSB (Least Significant Bit)
    text = '%4.3f+/-%4.3f' % (mean, stddev)
    print("Gravity in m/s^2 = %s" % text)
    display.scroll(text,wait=False)
